// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc1
// source: master.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Master_Discover_FullMethodName = "/pb.Master/Discover"
	Master_Create_FullMethodName   = "/pb.Master/Create"
	Master_Write_FullMethodName    = "/pb.Master/Write"
	Master_Register_FullMethodName = "/pb.Master/Register"
)

// MasterClient is the client API for Master service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClient interface {
	// Discover returns all chunk servers storing the replica of the specified chunk.
	Discover(ctx context.Context, opts ...grpc.CallOption) (Master_DiscoverClient, error)
	// Create creates a new file.
	Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error)
	// Write appends more data to the end of specified file.
	Write(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteResp, error)
	// Register puts one more chunk server into registry.
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
}

type masterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClient(cc grpc.ClientConnInterface) MasterClient {
	return &masterClient{cc}
}

func (c *masterClient) Discover(ctx context.Context, opts ...grpc.CallOption) (Master_DiscoverClient, error) {
	stream, err := c.cc.NewStream(ctx, &Master_ServiceDesc.Streams[0], Master_Discover_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &masterDiscoverClient{stream}
	return x, nil
}

type Master_DiscoverClient interface {
	Send(*EntryReq) error
	Recv() (*EntryResp, error)
	grpc.ClientStream
}

type masterDiscoverClient struct {
	grpc.ClientStream
}

func (x *masterDiscoverClient) Send(m *EntryReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *masterDiscoverClient) Recv() (*EntryResp, error) {
	m := new(EntryResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *masterClient) Create(ctx context.Context, in *CreateReq, opts ...grpc.CallOption) (*CreateResp, error) {
	out := new(CreateResp)
	err := c.cc.Invoke(ctx, Master_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) Write(ctx context.Context, in *WriteReq, opts ...grpc.CallOption) (*WriteResp, error) {
	out := new(WriteResp)
	err := c.cc.Invoke(ctx, Master_Write_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, Master_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServer is the server API for Master service.
// All implementations must embed UnimplementedMasterServer
// for forward compatibility
type MasterServer interface {
	// Discover returns all chunk servers storing the replica of the specified chunk.
	Discover(Master_DiscoverServer) error
	// Create creates a new file.
	Create(context.Context, *CreateReq) (*CreateResp, error)
	// Write appends more data to the end of specified file.
	Write(context.Context, *WriteReq) (*WriteResp, error)
	// Register puts one more chunk server into registry.
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	mustEmbedUnimplementedMasterServer()
}

// UnimplementedMasterServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServer struct {
}

func (UnimplementedMasterServer) Discover(Master_DiscoverServer) error {
	return status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedMasterServer) Create(context.Context, *CreateReq) (*CreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMasterServer) Write(context.Context, *WriteReq) (*WriteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedMasterServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMasterServer) mustEmbedUnimplementedMasterServer() {}

// UnsafeMasterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServer will
// result in compilation errors.
type UnsafeMasterServer interface {
	mustEmbedUnimplementedMasterServer()
}

func RegisterMasterServer(s grpc.ServiceRegistrar, srv MasterServer) {
	s.RegisterService(&Master_ServiceDesc, srv)
}

func _Master_Discover_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MasterServer).Discover(&masterDiscoverServer{stream})
}

type Master_DiscoverServer interface {
	Send(*EntryResp) error
	Recv() (*EntryReq, error)
	grpc.ServerStream
}

type masterDiscoverServer struct {
	grpc.ServerStream
}

func (x *masterDiscoverServer) Send(m *EntryResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *masterDiscoverServer) Recv() (*EntryReq, error) {
	m := new(EntryReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Master_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Create(ctx, req.(*CreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_Write_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Write(ctx, req.(*WriteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Master_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Master_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Master_ServiceDesc is the grpc.ServiceDesc for Master service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Master_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Master",
	HandlerType: (*MasterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Master_Create_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Master_Write_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Master_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Discover",
			Handler:       _Master_Discover_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "master.proto",
}
